name: Convert Subscription to V2Ray

on:
  schedule:
    - cron: '0 */6 * * *'  # 每6小时执行一次
  workflow_dispatch:  # 允许手动触发

jobs:
  convert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download YAML file
        run: |
          mkdir -p download
          wget -O download/sub.yaml https://raw.githubusercontent.com/go4sharing/sub/refs/heads/main/sub.yaml
          
      - name: Install dependencies
        run: |
          pip3 install pyyaml requests
          
      - name: Convert to V2Ray format
        run: |
          mkdir -p v2ray
          python3 <<EOF
import yaml
import json
import os

# 读取YAML文件
with open('download/sub.yaml', 'r', encoding='utf-8') as f:
    data = yaml.safe_load(f)

# 创建V2Ray配置目录
os.makedirs('v2ray', exist_ok=True)

# 提取节点信息并转换为V2Ray格式
if 'proxies' in data:
    proxies_config = []
    for proxy in data['proxies']:
        config = {
            'log': {'loglevel': 'warning'},
            'inbounds': [{
                'port': 10808,
                'protocol': 'socks',
                'settings': {'auth': 'noauth', 'udp': True}
            }],
            'outbounds': [{
                'protocol': proxy.get('type', 'vmess'),
                'settings': {
                    'vnext': [{
                        'address': proxy.get('server', ''),
                        'port': proxy.get('port', 0),
                        'users': [{
                            'id': proxy.get('uuid', ''),
                            'alterId': proxy.get('alterId', 0),
                            'security': proxy.get('cipher', 'auto')
                        }]
                    }]
                },
                'streamSettings': {}
            }]
        }
        
        # 处理网络类型（WS/TCP/TLS）
        network = proxy.get('network', 'tcp')
        config['outbounds'][0]['streamSettings']['network'] = network
        if network == 'ws':
            config['outbounds'][0]['streamSettings']['wsSettings'] = {
                'path': proxy.get('ws-path', '/'),
                'headers': {'Host': proxy.get('ws-headers', {}).get('Host', '')}
            }
        elif network == 'tcp' and proxy.get('tls', False):
            config['outbounds'][0]['streamSettings']['security'] = 'tls'
        
        proxies_config.append(config)
    
    # 生成最终配置（合并所有节点到proxies数组）
    final_config = {
        'proxies': proxies_config,
        'log': {'loglevel': 'warning'},
        'inbounds': [{
            'port': 10808,
            'protocol': 'socks',
            'settings': {'auth': 'noauth', 'udp': True}
        }]
    }
    
    # 保存为JSON文件
    with open('v2ray/config.json', 'w') as f:
        json.dump(final_config, f, indent=2)
    print(f"成功转换 {len(proxies_config)} 个节点到 v2ray/config.json")
else:
    print("警告：YAML文件中未找到proxies节点")
EOF

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add v2ray/
          if git diff --staged --quiet; then
            echo "没有需要提交的变更"
          else
            git commit -m "Update V2Ray configurations $(date)"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
